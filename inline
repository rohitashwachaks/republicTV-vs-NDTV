{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "63490e1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import gensim\n",
    "\n",
    "import nltk\n",
    "from nltk.tokenize import RegexpTokenizer\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "from nltk.tokenize import RegexpTokenizer\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "# nltk.download('stopwords')\n",
    "# nltk.download('punkt')\n",
    "# nltk.download('wordnet')\n",
    "# nltk.download('averaged_perceptron_tagger')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dce51d4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "scraped_data = pd.read_csv('./republic/republic_articles_final_v2.csv')\n",
    "scraped_data['time'] = pd.to_datetime(scraped_data['time'])\n",
    "scraped_data = scraped_data[[\"title\",\"content\"]].dropna().reset_index(drop=True).copy()\n",
    "print(\"Number of rows with any of the empty columns:\\n\",scraped_data.isnull().sum())\n",
    "scraped_data.fillna(\" \",inplace= True)\n",
    "print(\"Dimensions:\",scraped_data.shape)\n",
    "scraped_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "80413a90",
   "metadata": {},
   "outputs": [],
   "source": [
    "word_tokenizer=RegexpTokenizer(r'\\w+')\n",
    "wordnet_lemmatizer = WordNetLemmatizer()\n",
    "stopwords_nltk=set(stopwords.words('english'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ad242b60",
   "metadata": {},
   "outputs": [],
   "source": [
    "def tokenize_text(version_desc: str)-> list:\n",
    "    words = word_tokenizer.tokenize(wordnet_lemmatizer.lemmatize(version_desc.lower()))\n",
    "    tokens = {word for word, tag in nltk.pos_tag(words) if tag in 'NN'}\n",
    "    tokens = tokens.difference(stopwords_nltk) # removing stop-words\n",
    "    # tokens = {x for x in tokens if not str(x).startswith(\"#\")} # removing hashtags\n",
    "    tokens = [x for x in tokens if str(x).isalpha()] # removing non-alpha's \n",
    "    return tokens\n",
    "\n",
    "document = scraped_data[\"content\"][15]\n",
    "print(document,\"\\n\")\n",
    "print(tokenize_text(document))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "916ce6e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "tokens = scraped_data[\"content\"].apply(lambda x: tokenize_text(x))\n",
    "tokens\n",
    "# vec_words = CountVectorizer(tokenizer=tokenize_text,decode_error='ignore')\n",
    "# total_features_words = vec_words.fit_transform(scraped_data[\"content\"])\n",
    "# total_features_words.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2d38222d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from gensim.models import TfidfModel\n",
    "from gensim.corpora import Dictionary\n",
    "\n",
    "dct = Dictionary(tokens)\n",
    "dct.filter_extremes(no_below=50)  # fit dictionary\n",
    "print(dct)\n",
    "print(dct.token2id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "19d2178c",
   "metadata": {},
   "outputs": [],
   "source": [
    "corpus = [dct.doc2bow(line) for line in tokens]  # convert corpus to BoW format\n",
    "model = TfidfModel(corpus)  # fit model\n",
    "vector = model[corpus[0]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b2f9a92c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# from gensim.utils import simple_preprocess, lemmatize\n",
    "# import logging\n",
    "# logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s')\n",
    "# logging.root.setLevel(level=logging.INFO)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7d4fc246",
   "metadata": {},
   "outputs": [],
   "source": [
    "from gensim.models import LdaMulticore\n",
    "\n",
    "n_topics = 4\n",
    "lda_model = LdaMulticore(corpus=corpus,\n",
    "                         id2word=dct,\n",
    "                         random_state=1,\n",
    "                         num_topics=int(n_topics),\n",
    "                         passes=10,\n",
    "                         chunksize=1000,\n",
    "                         batch=False,\n",
    "                         alpha='asymmetric',\n",
    "                        #  decay=0.5,\n",
    "                         offset=64,\n",
    "                        #  eta=None,\n",
    "                        #  eval_every=0,\n",
    "                         iterations=500,\n",
    "                        #  gamma_threshold=0.001,\n",
    "                        #  per_word_topics=True\n",
    "                         );\n",
    "\n",
    "# save the model\n",
    "lda_model.save('lda_model.model');\n",
    "\n",
    "# See the topics\n",
    "lda_model.print_topics(-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ccd37f36",
   "metadata": {},
   "outputs": [],
   "source": [
    "topics_df = pd.DataFrame([], columns=[\"title\",\"content\",\"topic\"]+[i for i in range(0,n_topics)], index = scraped_data.index)\n",
    "\n",
    "topics_df[[\"title\",\"content\",\"topic\"]] = scraped_data[[\"title\",\"content\",\"topic\"]]\n",
    "\n",
    "topics_df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "14bcc41f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Wordcloud of Top N words in each topic\n",
    "from matplotlib import pyplot as plt\n",
    "from wordcloud import WordCloud, STOPWORDS\n",
    "import matplotlib.colors as mcolors\n",
    "\n",
    "cols = [color for name, color in mcolors.TABLEAU_COLORS.items()]  # more colors: 'mcolors.XKCD_COLORS'\n",
    "\n",
    "cloud = WordCloud(stopwords=stopwords_nltk,\n",
    "                  background_color='white',\n",
    "                  width=2500,\n",
    "                  height=1800,\n",
    "                  max_words=10,\n",
    "                  colormap='tab10',\n",
    "                  color_func=lambda *args, **kwargs: cols[i],\n",
    "                  prefer_horizontal=1.0)\n",
    "\n",
    "topics = lda_model.show_topics(formatted=False)\n",
    "\n",
    "fig, axes = plt.subplots(2, 2, sharex=True, sharey=True)\n",
    "\n",
    "fig.set_size_inches((20,10), forward= True)\n",
    "\n",
    "for i, ax in enumerate(axes.flatten()):\n",
    "    fig.add_subplot(ax)\n",
    "    topic_words = dict(topics[i][1])\n",
    "    cloud.generate_from_frequencies(topic_words, max_font_size=150)\n",
    "    plt.imshow(cloud)\n",
    "    ax.set_title('Topic ' + str(i), fontdict=dict(size=16))\n",
    "    # plt.axis('off')\n",
    "    # plt.gca().imshow(cloud)\n",
    "    # ax.set_title('Topic ' + str(i), fontdict=dict(size=16))\n",
    "    # plt.gca().axis('off')\n",
    "\n",
    "\n",
    "# plt.subplots_adjust(wspace=0, hspace=0)\n",
    "plt.axis('off')\n",
    "# plt.margins(x=0, y=0)\n",
    "plt.tight_layout()\n",
    "plt.suptitle(\"Important words by topic\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cd992f66",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Wordcloud of Top N words in each topic\n",
    "from matplotlib import pyplot as plt\n",
    "from wordcloud import WordCloud, STOPWORDS\n",
    "import matplotlib.colors as mcolors\n",
    "\n",
    "cols = [color for name, color in mcolors.TABLEAU_COLORS.items()]  # more colors: 'mcolors.XKCD_COLORS'\n",
    "\n",
    "cloud = WordCloud(stopwords=stopwords_nltk,\n",
    "                  background_color='white',\n",
    "                  width=2500,\n",
    "                  height=1800,\n",
    "                  max_words=10,\n",
    "                  colormap='tab10',\n",
    "                  color_func=lambda *args, **kwargs: cols[i],\n",
    "                  prefer_horizontal=1.0)\n",
    "\n",
    "topics = lda_model.show_topics(formatted=False)\n",
    "\n",
    "fig, axes = plt.subplots(2, 2, sharex=True, sharey=True)\n",
    "\n",
    "fig.set_size_inches((20,10), forward= True)\n",
    "\n",
    "for i, ax in enumerate(axes.flatten()):\n",
    "    print(i)\n",
    "    fig.add_subplot(ax)\n",
    "    topic_words = dict(topics[i][1])\n",
    "    cloud.generate_from_frequencies(topic_words, max_font_size=150)\n",
    "    plt.imshow(cloud)\n",
    "    ax.set_title('Topic ' + str(i), fontdict=dict(size=16))\n",
    "    plt.axis('off')\n",
    "    # plt.gca().imshow(cloud)\n",
    "    # ax.set_title('Topic ' + str(i), fontdict=dict(size=16))\n",
    "    # plt.gca().axis('off')\n",
    "plt.axis('off')\n",
    "# plt.margins(x=0, y=0)\n",
    "plt.tight_layout()\n",
    "plt.suptitle(\"Important words by topic\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "965744d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "topic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4b153e96",
   "metadata": {},
   "outputs": [],
   "source": [
    "topics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "dd42db8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "from gensim.models import LdaMulticore\n",
    "\n",
    "n_topics = 3\n",
    "lda_model = LdaMulticore(corpus=corpus,\n",
    "                         id2word=dct,\n",
    "                         random_state=1,\n",
    "                         num_topics=int(n_topics),\n",
    "                         passes=10,\n",
    "                         chunksize=1000,\n",
    "                         batch=False,\n",
    "                         alpha='asymmetric',\n",
    "                        #  decay=0.5,\n",
    "                         offset=64,\n",
    "                        #  eta=None,\n",
    "                        #  eval_every=0,\n",
    "                         iterations=500,\n",
    "                        #  gamma_threshold=0.001,\n",
    "                        #  per_word_topics=True\n",
    "                         );\n",
    "\n",
    "# save the model\n",
    "lda_model.save('lda_model.model');\n",
    "\n",
    "# See the topics\n",
    "lda_model.print_topics(-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7ffe372c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from gensim.models import LdaMulticore\n",
    "\n",
    "n_topics = 7\n",
    "lda_model = LdaMulticore(corpus=corpus,\n",
    "                         id2word=dct,\n",
    "                         random_state=1,\n",
    "                         num_topics=int(n_topics),\n",
    "                         passes=10,\n",
    "                         chunksize=1000,\n",
    "                         batch=False,\n",
    "                         alpha='asymmetric',\n",
    "                        #  decay=0.5,\n",
    "                         offset=64,\n",
    "                        #  eta=None,\n",
    "                        #  eval_every=0,\n",
    "                         iterations=500,\n",
    "                        #  gamma_threshold=0.001,\n",
    "                        #  per_word_topics=True\n",
    "                         );\n",
    "\n",
    "# save the model\n",
    "lda_model.save('lda_model.model');\n",
    "\n",
    "# See the topics\n",
    "lda_model.print_topics(-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0abeb79e",
   "metadata": {},
   "outputs": [],
   "source": [
    "topics_df = pd.DataFrame([], columns=[\"title\",\"content\",\"topic\"]+[i for i in range(0,n_topics)], index = scraped_data.index)\n",
    "\n",
    "topics_df[[\"title\",\"content\",\"topic\"]] = scraped_data[[\"title\",\"content\",\"topic\"]]\n",
    "\n",
    "topics_df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "30484175",
   "metadata": {},
   "outputs": [],
   "source": [
    "topics_df = pd.DataFrame([], columns=[\"title\",\"content\",\"topic\"]+[i for i in range(0,n_topics)], index = scraped_data.index)\n",
    "\n",
    "topics_df[[\"title\",\"content\"]] = scraped_data[[\"title\",\"content\"]]\n",
    "\n",
    "topics_df.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "18488c6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "for index, bow in enumerate(corpus):\n",
    "    topics = lda_model.get_document_topics(bow)\n",
    "    for topic, probability in topics:\n",
    "        topics_df[topic].iloc[index] = round(probability,2)\n",
    "    topic_max = max(topics, key = lambda x: x[1])[0]\n",
    "    topics_df[\"topic\"].iloc[index] = topic_max\n",
    "    # print(index)\n",
    "    # print(\"Topic:\",topic_max)\n",
    "    # print(scraped_data[\"title\"][index])\n",
    "    # print()\n",
    "topics_df = topics_df.fillna(0.0)\n",
    "topics_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "354ca1b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Wordcloud of Top N words in each topic\n",
    "from matplotlib import pyplot as plt\n",
    "from wordcloud import WordCloud, STOPWORDS\n",
    "import matplotlib.colors as mcolors\n",
    "\n",
    "cols = [color for name, color in mcolors.TABLEAU_COLORS.items()]  # more colors: 'mcolors.XKCD_COLORS'\n",
    "\n",
    "cloud = WordCloud(stopwords=stopwords_nltk,\n",
    "                  background_color='white',\n",
    "                  width=2500,\n",
    "                  height=1800,\n",
    "                  max_words=10,\n",
    "                  colormap='tab10',\n",
    "                  color_func=lambda *args, **kwargs: cols[i],\n",
    "                  prefer_horizontal=1.0)\n",
    "\n",
    "topics = lda_model.show_topics(formatted=False)\n",
    "\n",
    "fig, axes = plt.subplots(4, 2, sharex=True, sharey=True)\n",
    "\n",
    "fig.set_size_inches((20,10), forward= True)\n",
    "\n",
    "for i, ax in enumerate(axes.flatten()):\n",
    "    print(i)\n",
    "    fig.add_subplot(ax)\n",
    "    topic_words = dict(topics[i][1])\n",
    "    cloud.generate_from_frequencies(topic_words, max_font_size=150)\n",
    "    plt.imshow(cloud)\n",
    "    ax.set_title('Topic ' + str(i), fontdict=dict(size=16))\n",
    "    plt.axis('off')\n",
    "    # plt.gca().imshow(cloud)\n",
    "    # ax.set_title('Topic ' + str(i), fontdict=dict(size=16))\n",
    "    # plt.gca().axis('off')\n",
    "plt.axis('off')\n",
    "# plt.margins(x=0, y=0)\n",
    "plt.tight_layout()\n",
    "plt.suptitle(\"Important words by topic\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "90c84425",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Wordcloud of Top N words in each topic\n",
    "from matplotlib import pyplot as plt\n",
    "from wordcloud import WordCloud, STOPWORDS\n",
    "import matplotlib.colors as mcolors\n",
    "\n",
    "cols = [color for name, color in mcolors.TABLEAU_COLORS.items()]  # more colors: 'mcolors.XKCD_COLORS'\n",
    "\n",
    "cloud = WordCloud(stopwords=stopwords_nltk,\n",
    "                  background_color='white',\n",
    "                  width=2500,\n",
    "                  height=1800,\n",
    "                  max_words=10,\n",
    "                  colormap='tab10',\n",
    "                  color_func=lambda *args, **kwargs: cols[i],\n",
    "                  prefer_horizontal=1.0)\n",
    "\n",
    "topics = lda_model.show_topics(formatted=False)\n",
    "\n",
    "fig, axes = plt.subplots(2, 4, sharex=True, sharey=True)\n",
    "\n",
    "fig.set_size_inches((20,10), forward= True)\n",
    "\n",
    "for i, ax in enumerate(axes.flatten()):\n",
    "    print(i)\n",
    "    fig.add_subplot(ax)\n",
    "    topic_words = dict(topics[i][1])\n",
    "    cloud.generate_from_frequencies(topic_words, max_font_size=150)\n",
    "    plt.imshow(cloud)\n",
    "    ax.set_title('Topic ' + str(i), fontdict=dict(size=16))\n",
    "    plt.axis('off')\n",
    "    # plt.gca().imshow(cloud)\n",
    "    # ax.set_title('Topic ' + str(i), fontdict=dict(size=16))\n",
    "    # plt.gca().axis('off')\n",
    "plt.axis('off')\n",
    "# plt.margins(x=0, y=0)\n",
    "plt.tight_layout()\n",
    "plt.suptitle(\"Important words by topic\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "15103524",
   "metadata": {},
   "outputs": [],
   "source": [
    "targets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "28ed7581",
   "metadata": {},
   "outputs": [],
   "source": [
    "topics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "cabccf2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Wordcloud of Top N words in each topic\n",
    "from matplotlib import pyplot as plt\n",
    "from wordcloud import WordCloud, STOPWORDS\n",
    "import matplotlib.colors as mcolors\n",
    "\n",
    "cols = [color for name, color in mcolors.TABLEAU_COLORS.items()]  # more colors: 'mcolors.XKCD_COLORS'\n",
    "\n",
    "cloud = WordCloud(stopwords=stopwords_nltk,\n",
    "                  background_color='white',\n",
    "                  width=2500,\n",
    "                  height=1800,\n",
    "                  max_words=10,\n",
    "                  colormap='tab10',\n",
    "                  color_func=lambda *args, **kwargs: cols[i],\n",
    "                  prefer_horizontal=1.0)\n",
    "\n",
    "topics = lda_model.show_topics(formatted=False)\n",
    "\n",
    "fig, axes = plt.subplots(2, 4, sharex=True, sharey=True)\n",
    "\n",
    "fig.set_size_inches((20,10), forward= True)\n",
    "plt.suptitle(\"Important words by topic\")\n",
    "\n",
    "for i, ax in enumerate(axes.flatten()):\n",
    "    print(i)\n",
    "    fig.add_subplot(ax)\n",
    "    topic_words = dict(topics[i][1])\n",
    "    cloud.generate_from_frequencies(topic_words, max_font_size=150)\n",
    "    plt.imshow(cloud)\n",
    "    ax.set_title('Topic ' + str(i), fontdict=dict(size=16))\n",
    "    plt.axis('off')\n",
    "    # plt.gca().imshow(cloud)\n",
    "    # ax.set_title('Topic ' + str(i), fontdict=dict(size=16))\n",
    "    # plt.gca().axis('off')\n",
    "plt.axis('off')\n",
    "# plt.margins(x=0, y=0)\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f1cf33e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Wordcloud of Top N words in each topic\n",
    "from matplotlib import pyplot as plt\n",
    "from wordcloud import WordCloud, STOPWORDS\n",
    "import matplotlib.colors as mcolors\n",
    "\n",
    "cols = [color for name, color in mcolors.TABLEAU_COLORS.items()]  # more colors: 'mcolors.XKCD_COLORS'\n",
    "\n",
    "cloud = WordCloud(stopwords=stopwords_nltk,\n",
    "                  background_color='white',\n",
    "                  width=2500,\n",
    "                  height=1800,\n",
    "                  max_words=10,\n",
    "                  colormap='tab10',\n",
    "                  color_func=lambda *args, **kwargs: cols[i],\n",
    "                  prefer_horizontal=1.0)\n",
    "\n",
    "topics = lda_model.show_topics(formatted=False)\n",
    "\n",
    "fig, axes = plt.subplots(2, 4, sharex=True, sharey=True)\n",
    "\n",
    "fig.set_size_inches((20,10), forward= True)\n",
    "plt.suptitle(\"Important words by topic\")\n",
    "\n",
    "for i, ax in enumerate(axes.flatten()):\n",
    "    print(i)\n",
    "    fig.add_subplot(ax)\n",
    "    topic_words = dict(topics[i][1])\n",
    "    cloud.generate_from_frequencies(topic_words, max_font_size=200)\n",
    "    plt.imshow(cloud)\n",
    "    ax.set_title('Topic ' + str(i), fontdict=dict(size=16))\n",
    "    plt.axis('off')\n",
    "    # plt.gca().imshow(cloud)\n",
    "    # ax.set_title('Topic ' + str(i), fontdict=dict(size=16))\n",
    "    # plt.gca().axis('off')\n",
    "plt.axis('off')\n",
    "# plt.margins(x=0, y=0)\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "463b6fc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. Wordcloud of Top N words in each topic\n",
    "from matplotlib import pyplot as plt\n",
    "from wordcloud import WordCloud, STOPWORDS\n",
    "import matplotlib.colors as mcolors\n",
    "\n",
    "cols = [color for name, color in mcolors.TABLEAU_COLORS.items()]  # more colors: 'mcolors.XKCD_COLORS'\n",
    "topic_moniker = ['Law & Order',2,3,\"Sports\",\"Regional\",6,\"Education\"]\n",
    "\n",
    "cloud = WordCloud(stopwords=stopwords_nltk,\n",
    "                  background_color='white',\n",
    "                  width=2500,\n",
    "                  height=1800,\n",
    "                  max_words=10,\n",
    "                  colormap='tab10',\n",
    "                  color_func=lambda *args, **kwargs: cols[i],\n",
    "                  prefer_horizontal=1.0)\n",
    "\n",
    "topics = lda_model.show_topics(formatted=False)\n",
    "\n",
    "fig, axes = plt.subplots(2, 4, sharex=True, sharey=True)\n",
    "\n",
    "fig.set_size_inches((20,10), forward= True)\n",
    "plt.suptitle(\"Important words by topic\")\n",
    "\n",
    "for i, ax in enumerate(axes.flatten()):\n",
    "    print(i)\n",
    "    fig.add_subplot(ax)\n",
    "    topic_words = dict(topics[i][1])\n",
    "    cloud.generate_from_frequencies(topic_words, max_font_size=200)\n",
    "    plt.imshow(cloud)\n",
    "    ax.set_title('Topic : ' + str(topic_moniker[i]), fontdict=dict(size=16))\n",
    "    plt.axis('off')\n",
    "    # plt.gca().imshow(cloud)\n",
    "    # ax.set_title('Topic ' + str(i), fontdict=dict(size=16))\n",
    "    # plt.gca().axis('off')\n",
    "plt.axis('off')\n",
    "# plt.margins(x=0, y=0)\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "314280a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Labelfrom bokeh.io import output_notebook\n",
    "\n",
    "# Get topic weights\n",
    "topic_weights = []for i, row_list in enumerate(lda_model[corpus]):\n",
    "    topic_weights.append([w for i, w in row_list[0]])# Array of topic weights    \n",
    "arr = pd.DataFrame(topic_weights).fillna(0).values\n",
    "\n",
    "# Keep the well separated points (optional)\n",
    "arr = arr[np.amax(arr, axis=1) > 0.35]# Dominant topic number in each doc\n",
    "topic_num = np.argmax(arr, axis=1)# tSNE Dimension Reduction\n",
    "tsne_model = TSNE(n_components=2, verbose=1, random_state=0, angle=.99, init='pca')\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]])# Plot the Topic Clusters using Bokeh\n",
    "output_notebook()\n",
    "\n",
    "\n",
    "# mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "# plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "#               plot_width=900, plot_height=700)\n",
    "# plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topic_num])\n",
    "# show(plot)\n",
    "\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]])\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "bac43ffe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "\n",
    "# Get topic weights\n",
    "topic_weights = []for i, row_list in enumerate(lda_model[corpus]):\n",
    "    topic_weights.append([w for i, w in row_list[0]])# Array of topic weights    \n",
    "arr = pd.DataFrame(topic_weights).fillna(0).values\n",
    "\n",
    "# Keep the well separated points (optional)\n",
    "arr = arr[np.amax(arr, axis=1) > 0.35]# Dominant topic number in each doc\n",
    "topic_num = np.argmax(arr, axis=1)# tSNE Dimension Reduction\n",
    "tsne_model = TSNE(n_components=2, verbose=1, random_state=0, angle=.99, init='pca')\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]])# Plot the Topic Clusters using Bokeh\n",
    "output_notebook()\n",
    "\n",
    "\n",
    "# mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "# plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "#               plot_width=900, plot_height=700)\n",
    "# plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topic_num])\n",
    "# show(plot)\n",
    "\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]])\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "4b5d9b34",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "\n",
    "# Get topic weights\n",
    "# topic_weights = []for i, row_list in enumerate(lda_model[corpus]):\n",
    "#     topic_weights.append([w for i, w in row_list[0]])# Array of topic weights    \n",
    "# arr = pd.DataFrame(topic_weights).fillna(0).values\n",
    "\n",
    "# Keep the well separated points (optional)\n",
    "# arr = arr[np.amax(arr, axis=1) > 0.35]# Dominant topic number in each doc\n",
    "# topic_num = np.argmax(arr, axis=1)# tSNE Dimension Reduction\n",
    "tsne_model = TSNE(n_components=2, verbose=1, random_state=0, angle=.99, init='pca')\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]])# Plot the Topic Clusters using Bokeh\n",
    "output_notebook()\n",
    "\n",
    "\n",
    "# mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "# plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "#               plot_width=900, plot_height=700)\n",
    "# plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topic_num])\n",
    "# show(plot)\n",
    "\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]])\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ebf270d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "# Get topic weights\n",
    "# topic_weights = []for i, row_list in enumerate(lda_model[corpus]):\n",
    "#     topic_weights.append([w for i, w in row_list[0]])# Array of topic weights    \n",
    "# arr = pd.DataFrame(topic_weights).fillna(0).values\n",
    "\n",
    "# Keep the well separated points (optional)\n",
    "# arr = arr[np.amax(arr, axis=1) > 0.35]# Dominant topic number in each doc\n",
    "# topic_num = np.argmax(arr, axis=1)# tSNE Dimension Reduction\n",
    "tsne_model = TSNE(n_components=2, verbose=1, random_state=0, angle=.99, init='pca')\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]])# Plot the Topic Clusters using Bokeh\n",
    "output_notebook()\n",
    "\n",
    "\n",
    "# mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "# plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "#               plot_width=900, plot_height=700)\n",
    "# plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topic_num])\n",
    "# show(plot)\n",
    "\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]])\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "739c3239",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "# Get topic weights\n",
    "# topic_weights = []for i, row_list in enumerate(lda_model[corpus]):\n",
    "#     topic_weights.append([w for i, w in row_list[0]])# Array of topic weights    \n",
    "# arr = pd.DataFrame(topic_weights).fillna(0).values\n",
    "\n",
    "# Keep the well separated points (optional)\n",
    "# arr = arr[np.amax(arr, axis=1) > 0.35]# Dominant topic number in each doc\n",
    "# topic_num = np.argmax(arr, axis=1)# tSNE Dimension Reduction\n",
    "tsne_model = TSNE(n_components=2, verbose=1, random_state=0, angle=.99, init='pca')\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]])# Plot the Topic Clusters using Bokeh\n",
    "output_notebook()\n",
    "\n",
    "\n",
    "# mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "# plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "#               plot_width=900, plot_height=700)\n",
    "# plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topic_num])\n",
    "# show(plot)\n",
    "\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]])\n",
    "\n",
    "plot.legend()\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3ba84b9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyLDAvis.gensim\n",
    "pyLDAvis.enable_notebook()\n",
    "vis = pyLDAvis.gensim.prepare(lda_model, corpus, dictionary=lda_model.id2word)\n",
    "vis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "72756821",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyLDAvis.gensim\n",
    "pyLDAvis.enable_notebook()\n",
    "vis = pyLDAvis.gensim.prepare(lda_model, corpus, dictionary=lda_model.id2word)\n",
    "vis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "3b5fa8ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyLDAvis.gensim\n",
    "pyLDAvis.enable_notebook()\n",
    "vis = pyLDAvis.gensim.prepare(lda_model, corpus, dictionary=dic)\n",
    "vis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "cea64091",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyLDAvis.gensim_models\n",
    "pyLDAvis.enable_notebook()\n",
    "vis = pyLDAvis.gensim.prepare(lda_model, corpus, dictionary=dic)\n",
    "vis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "698168bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyLDAvis.gensim_models\n",
    "pyLDAvis.enable_notebook()\n",
    "vis = pyLDAvis.gensim.prepare(lda_model, corpus, dictionary=dic)\n",
    "vis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "cbdd4443",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyLDAvis.gensim_models\n",
    "pyLDAvis.enable_notebook()\n",
    "vis = pyLDAvis.gensim_models.prepare(lda_model, corpus, dictionary=dic)\n",
    "vis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f1e5c800",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyLDAvis.gensim_models\n",
    "pyLDAvis.enable_notebook()\n",
    "vis = pyLDAvis.gensim_models.prepare(lda_model, corpus, dictionary=lda_model.model.id2word)\n",
    "vis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6da90be7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyLDAvis.gensim_models\n",
    "pyLDAvis.enable_notebook()\n",
    "vis = pyLDAvis.gensim_models.prepare(lda_model, corpus, dictionary=lda_model.id2word)\n",
    "vis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "29898744",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyLDAvis.gensim_models\n",
    "pyLDAvis.enable_notebook()\n",
    "vis = pyLDAvis.gensim_models.prepare(lda_model, corpus, dictionary=lda_model.id2word);\n",
    "vis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "f7575567",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyLDAvis.gensim_models\n",
    "pyLDAvis.enable_notebook()\n",
    "vis = pyLDAvis.gensim_models.prepare(lda_model, corpus, dictionary=lda_model.id2word);\n",
    "vis;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "deed6019",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyLDAvis.gensim_models\n",
    "pyLDAvis.enable_notebook()\n",
    "vis = pyLDAvis.gensim_models.prepare(lda_model, corpus, dictionary=lda_model.id2word);\n",
    "vis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "6eda7740",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "tsne_model = TSNE(n_components=2, verbose=1, random_state=0, angle=.99, init='pca')\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]])# Plot the Topic Clusters using Bokeh\n",
    "output_notebook()\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]])\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "dc7a544a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "tsne_model = TSNE(n_components=2, verbose=1, random_state=0, angle=.99, init='pca')\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]])# Plot the Topic Clusters using Bokeh\n",
    "output_notebook()\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]]);\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "880de8b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "tsne_model = TSNE(n_components=2, verbose=1, random_state=0, angle=.99, init='pca');\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]]);# Plot the Topic Clusters using Bokeh\n",
    "output_notebook()\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]]);\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "ca3280d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "tsne_model = TSNE(n_components=2, verbose=1, random_state=0, angle=.99, init='pca');\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]]);# Plot the Topic Clusters using Bokeh\n",
    "output_notebook();\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]]);\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "348bd42b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "tsne_model = TSNE(n_components=3, verbose=1, random_state=0, angle=.99, init='pca');\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]]);# Plot the Topic Clusters using Bokeh\n",
    "output_notebook();\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]]);\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "7a05e254",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "tsne_model = TSNE(n_components=5, verbose=1, random_state=0, angle=.99, init='pca');\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]]);# Plot the Topic Clusters using Bokeh\n",
    "output_notebook();\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]]);\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "98d74954",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "tsne_model = TSNE(n_components=4, verbose=1, random_state=0, angle=.99, init='pca');\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]]);# Plot the Topic Clusters using Bokeh\n",
    "output_notebook();\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]]);\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "75826b7a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "tsne_model = TSNE(n_components=1, verbose=1, random_state=0, angle=.99, init='pca');\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]]);# Plot the Topic Clusters using Bokeh\n",
    "output_notebook();\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]]);\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "8c4ff385",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "tsne_model = TSNE(n_components=2, verbose=1, random_state=100, angle=.99, init='pca');\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]]);# Plot the Topic Clusters using Bokeh\n",
    "output_notebook();\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]]);\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "efef44ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "tsne_model = TSNE(n_components=2, verbose=1, random_state=100, angle=1, init='pca');\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]]);# Plot the Topic Clusters using Bokeh\n",
    "output_notebook();\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]]);\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "a02715dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "tsne_model = TSNE(n_components=2, verbose=1, random_state=100, angle=0, init='pca');\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]]);# Plot the Topic Clusters using Bokeh\n",
    "output_notebook();\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]]);\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "bc8b7519",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "tsne_model = TSNE(n_components=2, verbose=1, random_state=100, angle=0.5, init='pca');\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]]);# Plot the Topic Clusters using Bokeh\n",
    "output_notebook();\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]]);\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "67ef78d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "tsne_model = TSNE(n_components=2, verbose=1, random_state=100, angle=0.9, init='pca');\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]]);# Plot the Topic Clusters using Bokeh\n",
    "output_notebook();\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]]);\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "3c06e13c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get topic weights and dominant topics ------------from sklearn.manifold import TSNE\n",
    "from bokeh.plotting import figure, output_file, show\n",
    "from bokeh.models import Label\n",
    "from bokeh.io import output_notebook\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "tsne_model = TSNE(n_components=2, random_state=100, angle=0.9, init='pca');\n",
    "tsne_lda = tsne_model.fit_transform(topics_df[[i for i in range(0,n_topics)]]);# Plot the Topic Clusters using Bokeh\n",
    "output_notebook();\n",
    "\n",
    "mycolors = np.array([color for name, color in mcolors.TABLEAU_COLORS.items()])\n",
    "plot = figure(title=\"t-SNE Clustering of {} LDA Topics\".format(n_topics), \n",
    "              plot_width=900, plot_height=700)\n",
    "plot.scatter(x=tsne_lda[:,0], y=tsne_lda[:,1], color=mycolors[topics_df[\"topic\"]]);\n",
    "\n",
    "show(plot)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "303d44fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyLDAvis.gensim_models\n",
    "pyLDAvis.enable_notebook()\n",
    "vis = pyLDAvis.gensim_models.prepare(lda_model, corpus, dictionary=lda_model.id2word);\n",
    "vis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "2be35aab",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plt.figure()\n",
    "fig.set_size_inches((20,10))\n",
    "ax = fig.add_subplot(projection='3d')\n",
    "\n",
    "# For each set of style and range settings, plot n random points in the box\n",
    "# defined by x in [23, 32], y in [0, 100], z in [zlow, zhigh].\n",
    "m = ['o','^','*']\n",
    "for i in range(0,3):\n",
    "    t = topics_df[topics_df['topic'] == i]\n",
    "    ax.scatter(t[0], t[1], t[2], marker = m[i])\n",
    "\n",
    "ax.set_xlabel('X Label')\n",
    "ax.set_ylabel('Y Label')\n",
    "ax.set_zlabel('Z Label')\n",
    "\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
